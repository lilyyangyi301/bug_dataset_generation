#!/usr/bin/env node

'use strict';

// to use V8's code cache to speed up instantiation time
require('v8-compile-cache');

/**
 * Get the error message of a given value.
 * @param {any} error The value to get.
 * @returns {string} The error message.
 */
function getErrorMessage(error) {

    // Lazy loading because those are used only if error happened.
    const fs = require('fs');
    const path = require('path');
    const util = require('util');
    const lodash = require('lodash');

    // Foolproof -- thirdparty module might throw non-object.
    if (typeof error !== 'object' || error === null) {
        return String(error);
    }

    // Use templates if `error.messageTemplate` is present.
    if (typeof error.messageTemplate === 'string') {
        try {
            const templateFilePath = path.resolve(
                __dirname,
                `../messages/${error.messageTemplate}.txt`
            );

            // Use sync API because Node.js should exit at this tick.
            const templateText = fs.readFileSync(templateFilePath, 'utf-8');
            const template = lodash.template(templateText);

            return template(error.messageData || {});
        } catch {

            // Ignore template error then fallback to use `error.stack`.
        }
    }

    // Use the stacktrace if it's an error object.
    if (typeof error.stack === 'string') {
        return error.stack;
    }

    // Otherwise, dump the object.
    return util.format('%o', error);
}

/**
 * Catch and report unexpected error.
 * @param {any} error The thrown error object.
 * @returns {void}
 */
function onFatalError(error) {
    process.exitCode = 2;

    const { version } = require('../package.json');
    const message = getErrorMessage(error);

    console.error(`
Oops! Something went wrong! :(

Tokenizer: ${version}

${message}`);
}

//------------------------------------------------------------------------------
// Execution
//------------------------------------------------------------------------------

(async function main() {
    process.on('uncaughtException', onFatalError);
    process.on('unhandledRejection', onFatalError);

    // Otherwise, call the CLI.
    process.exitCode = await require('../lib/initializerCLI').execute();
}()).catch(onFatalError);